// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Yelp;
//
//    var yelpRating = YelpRating.FromJson(jsonString);

namespace YelpBusinessWithReview
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BusinessWithReview
    {
        [JsonProperty("businesses")]
        public Business[] Businesses { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("region")]
        public Region Region { get; set; }
    }

    public partial class Business
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image_url")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("is_closed")]
        public bool IsClosed { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("review_count")]
        public long ReviewCount { get; set; }

        [JsonProperty("categories")]
        public Category[] Categories { get; set; }

        [JsonProperty("rating")]
        public double Rating { get; set; }

        [JsonProperty("coordinates")]
        public Center Coordinates { get; set; }

        [JsonProperty("transactions")]
        public string[] Transactions { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public Price? Price { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("display_phone")]
        public string DisplayPhone { get; set; }

        [JsonProperty("distance")]
        public double Distance { get; set; }

        [JsonProperty("reviews")]
        public Review[] Reviews { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("possible_languages")]
        public string[] PossibleLanguages { get; set; }

    }

    public partial class Category
    {
        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class Center
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("address1")]
        public string Address1 { get; set; }

        [JsonProperty("address2")]
        public Address2? Address2 { get; set; }

        [JsonProperty("address3")]
        public string Address3 { get; set; }

        [JsonProperty("city")]
        public City City { get; set; }

        [JsonProperty("zip_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ZipCode { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("display_address")]
        public string[] DisplayAddress { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("center")]
        public Center Center { get; set; }
    }
    public partial class Review
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("rating")]
        public long Rating { get; set; }

        [JsonProperty("time_created")]
        public DateTimeOffset TimeCreated { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("profile_url")]
        public Uri ProfileUrl { get; set; }

        [JsonProperty("image_url")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public enum Address2 { Empty, Ste1 };

    public enum City { Bellevue, Cincinnati, Covington, Newport };

    public enum Country { Us };

    public enum State { Ky, Oh };

    public enum Price { Empty, Price, Purple };

    public partial class BusinessWithReview
    {
        public static BusinessWithReview FromJson(string json) => JsonConvert.DeserializeObject<BusinessWithReview>(json, Yelp.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BusinessWithReview self) => JsonConvert.SerializeObject(self, Yelp.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                Address2Converter.Singleton,
                CityConverter.Singleton,
                CountryConverter.Singleton,
                StateConverter.Singleton,
                PriceConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class Address2Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Address2) || t == typeof(Address2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Address2.Empty;
                case "Ste 1":
                    return Address2.Ste1;
            }
            throw new Exception("Cannot unmarshal type Address2");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Address2)untypedValue;
            switch (value)
            {
                case Address2.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Address2.Ste1:
                    serializer.Serialize(writer, "Ste 1");
                    return;
            }
            throw new Exception("Cannot marshal type Address2");
        }

        public static readonly Address2Converter Singleton = new Address2Converter();
    }

    internal class CityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(City) || t == typeof(City?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Bellevue":
                    return City.Bellevue;
                case "Cincinnati":
                    return City.Cincinnati;
                case "Covington":
                    return City.Covington;
                case "Newport":
                    return City.Newport;
            }
            throw new Exception("Cannot unmarshal type City");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (City)untypedValue;
            switch (value)
            {
                case City.Bellevue:
                    serializer.Serialize(writer, "Bellevue");
                    return;
                case City.Cincinnati:
                    serializer.Serialize(writer, "Cincinnati");
                    return;
                case City.Covington:
                    serializer.Serialize(writer, "Covington");
                    return;
                case City.Newport:
                    serializer.Serialize(writer, "Newport");
                    return;
            }
            throw new Exception("Cannot marshal type City");
        }

        public static readonly CityConverter Singleton = new CityConverter();
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return Country.Us;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            if (value == Country.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KY":
                    return State.Ky;
                case "OH":
                    return State.Oh;
            }
            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (State)untypedValue;
            switch (value)
            {
                case State.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case State.Oh:
                    serializer.Serialize(writer, "OH");
                    return;
            }
            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class PriceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Price) || t == typeof(Price?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "$":
                    return Price.Price;
                case "$$":
                    return Price.Empty;
                case "$$$":
                    return Price.Purple;
            }
            throw new Exception("Cannot unmarshal type Price");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Price)untypedValue;
            switch (value)
            {
                case Price.Price:
                    serializer.Serialize(writer, "$");
                    return;
                case Price.Empty:
                    serializer.Serialize(writer, "$$");
                    return;
                case Price.Purple:
                    serializer.Serialize(writer, "$$$");
                    return;
            }
            throw new Exception("Cannot marshal type Price");
        }

        public static readonly PriceConverter Singleton = new PriceConverter();
    }
}

