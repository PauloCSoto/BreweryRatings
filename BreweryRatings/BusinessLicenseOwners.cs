using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace BusinessLicenseOwnerNamespace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BusinessLicenseOwner
    {
        [JsonProperty("accountNumber")]
        public long AccountNumber { get; set; }

        [JsonProperty("doingBusinessAsName")]
        public string DoingBusinessAsName { get; set; }

        [JsonProperty("ownerFirstName")]
        public string OwnerFirstName { get; set; }

        [JsonProperty("ownerLastName")]
        public string OwnerLastName { get; set; }

        [JsonProperty("ownerTitle")]
        public string OwnerTitle { get; set; }

        [JsonProperty("licenseNumber")]
        public long LicenseNumber { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("businessActivity")]
        public string BusinessActivity { get; set; }

        [JsonProperty("city")]
        public City City { get; set; }

        internal static BusinessLicenseOwner FromJson(Task<string> businessLicenseSearch)
        {
            throw new NotImplementedException();
        }
    }

    public enum City { Chicago };

    public enum State { Il };

    public partial class BusinessLicenseOwner
    {
        public static BusinessLicenseOwner[] FromJson(string json) => JsonConvert.DeserializeObject<BusinessLicenseOwner[]>(json, BusinessLicenseOwnerNamespace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BusinessLicenseOwner[] self) => JsonConvert.SerializeObject(self, BusinessLicenseOwnerNamespace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CityConverter.Singleton,
                StateConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(City) || t == typeof(City?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "CHICAGO")
            {
                return City.Chicago;
            }
            throw new Exception("Cannot unmarshal type City");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (City)untypedValue;
            if (value == City.Chicago)
            {
                serializer.Serialize(writer, "CHICAGO");
                return;
            }
            throw new Exception("Cannot marshal type City");
        }

        public static readonly CityConverter Singleton = new CityConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "IL")
            {
                return State.Il;
            }
            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (State)untypedValue;
            if (value == State.Il)
            {
                serializer.Serialize(writer, "IL");
                return;
            }
            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }
}

